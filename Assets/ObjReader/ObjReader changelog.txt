ObjReader Release Notes
-----------------------

ObjReader 2.4

Additions:
	• The ObjData variable returned by ConvertFileAsync has a Cancel function now, so downloads can be cancelled at any time.
	• Bumpmap textures are loaded, if they're specified by "map_bump" or "bump" in the MTL file.
	• UseFileNameAsObjectName variable, which if checked will use the actual name of the file as the name of the generated GameObject(s), rather than any group names specified in the OBJ file.

-----------

ObjReader 2.3.5

Fixes:
	• Works with Unity 5.

-----------

ObjReader 2.3.4

Fixes:
	• Fixed groups not having the correct material in certain cases (namely where some groups didn't explicitly specify a material, and were supposed to use the last specified material).

-----------

ObjReader 2.3.3

Fixes:
	• Fixed exception that could occur on iOS.

-----------

ObjReader 2.3.2

Fixes:
	• Fixed issue with MTL entries that contained no texture picking up the texture from the previous entry that did contain a texture.

-----------

ObjReader 2.3.1

Fixes:
	• Texture file names that contain spaces are supported.

-----------

ObjReader 2.3

Additions:
	• UseMTLFallback option, in case an OBJ file specifies a MTL file but it's missing, in which case the standard material will be used instead.
	• AutoCenterOnOrigin option, to make meshes be physically centered around (0, 0, 0) regardless of the position in the OBJ file.

Fixes:
	• MTL files which use "tr" for transparency instead of "d" are supported.

-----------

ObjReader 2.2.1

Fixes:
	• Fixed issue with lines combined with "\" potentially not being sanitized correctly.

-----------

ObjReader 2.2

Improvements:
	• Better error handling when loading WWW files.
	• Reduced memory usage and increased speed.
	• Better OBJ file compatibility, specifically with files generated by Meshlab.

Fixes:
	• ConvertString works with MTL file strings in the webplayer.
	• Missing MTL files will still allow the object to be created (without any materials of course).

-----------

ObjReader 2.1

Additions:
	• ConvertFileAsync function, which automatically loads OBJ files from the internet, including MTL and texture files where appropriate. This includes a progress variable for the entire combined download. It's also possible to download multiple OBJ files simultaneously.

Changes:
	• Changed group detection, so more OBJ files are imported correctly (specifically, OBJ files generated by Sketchup, and possibly others).
	• A few speedups, so OBJ parsing is ~10% faster.
	• Better handling for files that aren't actually OBJ files.

Fixes:
	• Lines that start with whitespace are parsed correctly.

-----------

ObjReader 2.0

Note: If you're upgrading from an older version of ObjReader, any scripts that used the old ReadFile function will need to be reworked, since the ObjReader API has been redesigned. See the documentation for how to use ObjReader 2.0.

Additions:
	• MTL files can be used now.
	• A ConvertFile function, where you supply a file name of an OBJ file (including path), and ObjReader will convert that into an object. (As opposed to the old ReadFile function, where you supplied a string containing the OBJ data.) If desired, ConvertFile will look for a MTL file specified by the OBJ file and use that, plus it will attempt to load any textures specified by the MTL file (JPG and PNG format only). Note that ConvertFile doesn't work in the web player; for that you should use the ConvertString function instead.
	• OverrideDiffuse, OverrideSpecular, and OverrideAmbient public variables: if you're using an MTL file, you can choose not to use the diffuse, specular, or ambient colors specified in the MTL file, and use the appropriate colors from a material you supply instead.
	• UseSubmeshesWhenCombining public variable: this is only used if CombineMultipleGroups is checked. If submeshes are used when combining, then a submesh is created for each group in the .obj file, and each submesh will use the appropriate material (if an MTL file is used--otherwise you'd have to supply your own materials after the mesh is created). If submeshes are not used when combining, then the mesh is generated with only one material...if using a MTL file, that material is the one used in the first group in the OBJ file. Otherwise, it's the standard material supplied when calling ConvertString.
	• SuppressWarnings public variable: if checked, warnings (such as automatic triangle generation being used, etc.) are not printed to the console.
	• A DLL is supplied in addition to the source code.

Changes:
	• The "ReadFile" function is now called "ConvertString", and has additional optional parameters including MTL file and materials used for standard and transparent meshes; see the documentation for details.
	• The ConvertString function returns a GameObject array now. So the Result class is no more. Warnings and errors are printed by ObjReader itself, and if any errors occur, ConvertString returns null.